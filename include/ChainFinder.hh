//Modify by Jixie: 
//Change this code to a class
//The whole class is in unit of cm and rad

#ifndef _ChainFinder_H_
#define _ChainFinder_H_ 1

#define MAX_HITS_PER_EVENT  5000   
#define MAX_CHAINS_PER_EVENT 100        
#define MAX_HITS_PER_CHAIN   200         
#define Min_HITS_PER_CHAIN   5   


/* The status bits for hits in the hitlists */
#define HUNTCHD 0  /* - untouched - no status set yet */
#define HISUSED 1  /* - (was 1) used */
#define HREMOVD 2  /* - (was 2)removed for high residual to helix */
#define HDISEAR 4  /* - t<TPC_TMIN */
#define HDISLAT 8  /* - t>TPC_TMAX */
#define HEARLST 0x10  /* - this hit is has earliest time for this pad on this chain */
#define HABSORB 0x20  /* - hit absorbed in routine weightData */
#define HSMALLQ 0x40  /* - (was -3) charge < THR_Q_LINK */
#define HITTEMP 0x80  /* for routine-specific status marks. */
#define FAKE_HIT 0x100 /* any type of artificially-generated hit */
#define PROJECTED_HIT 0x200 /* indicates a hit generated by projecting fitted track */
#define SWUMHIT 0x400 /* indicates a hit generated by swimming the track */
#define HBADPAD 0x800 /* hit is on a pad marked as bad */
#define HITUNAV (HISUSED|HDISEAR|HDISLAT|HABSORB|HSMALLQ|FAKE_HIT|HBADPAD) /* reasons to NOT use a hit in the chain-linker */

      
//By Jixie:  I add ChainInfo to tell ChainIndex cc and HitIndex jj
//ChainInfo  = cccjjj,  where ccc is ChainIndex and jj is HitIndex 
//ThrownTID  = cccjjj,  where ccc is TrackIndex and jj is HitIndex 
typedef struct {
  int ID;
  int TDC;
  int ADC;
  double X;
  double Y;
  double Z;
  int Status;
  //the following is added by Jixie in order to do sorting
  double S;       // distance to beam line
  double Phi;     //from -pi to pi
  int ThrownTID;  //To tell which track it was originally from
  int ChainInfo;  //to tell which chain this hit belongs to
}HitStruct;


typedef struct {
  int ID;     //Chain ID
  int HitNum; //Number of hits in this chain
  HitStruct* Hits[MAX_HITS_PER_CHAIN];
}ChainStruct;


class ChainFinder {
public:
  ChainFinder();
  virtual ~ChainFinder();
  
  void Reset();
  //provide x,x,z in mm
  void PrepareHitPool_mm(int *id, int *tdc, int *adc, double *x_mm, double *y_mm, 
                         double *z_mm, int n, int *throwntid=0, int append=0);
  //provide x,x,z in cm
  void PrepareHitPool(int *id, int *tdc, int *adc, double *x, double *y,
                      double *z, int n, int *throwntid=0, int append=0);
  
  int  SearchHitsForASeed(int seed, int seed_pre=0); 
  void SearchChains();  
  void SortAChain(int chainid);
  void StoreAChain(int chainid);
  void SetHitStatus(HitStruct *hit);
  
  void InsertAHitToPool(int hitid, int id, int tdc, int adc, double x, double y, double z, int ThrownTID=-1, int ChainInfo=-1);
  //return number of hit that removed
  int  RemoveAHitFromPool(int hitid);
  //return number of hit that removed
  int  RemoveBadHitsFromPool();
  
  
  //add a hit to end of fHitIDInAChain[MAX_CHAINS_PER_EVENT][MAX_HITS_PER_CHAIN];
  //will not touch fChainBuf yet
  void AddAHitToChain(int chainid, int hitid);

  //incert a hit to given position of fHitIDInAChain[MAX_CHAINS_PER_EVENT][MAX_HITS_PER_CHAIN];
  //will not touch fChainBuf yet
  void InsertAHitToChain(int chainid, int hitid, int position);
  
  //remove the first hit with id==hitid from fHitIDInAChain[MAX_CHAINS_PER_EVENT][MAX_HITS_PER_CHAIN];
  //will not touch fChainBuf yet
  //return number of hit that removed
  int  RemoveAHitFromChain(int chainid, int hitid);
  
  //remove the hit at given position  from fHitIDInAChain[MAX_CHAINS_PER_EVENT][MAX_HITS_PER_CHAIN];
  //will not touch fChainBuf yet
  //return number of hit that removed
  int  RemoveAHitFromChain_At(int chainid, int position);
  
  //remove redundate hit from fHitIDInAChain[MAX_CHAINS_PER_EVENT][MAX_HITS_PER_CHAIN];
  void RemoveRedundantFromChain(int chainid);

  void SetParameters(double space, double min_ang, double max_ang, double ang_sep);
  
  //print the information of the given chain
  void PrintAChain(int chainid);

  //sort the chain by phi angle, then check s
  void SortAChain();

public:
  int       fHitNum;                      //Number of Hits in the pool
  HitStruct fHitPool[MAX_HITS_PER_EVENT]; //Keep all hits in one event


  int         fChainNum_Stored;
  //this is the buffer to store the chains, only keep pointers
  ChainStruct fChainBuf[MAX_CHAINS_PER_EVENT];   //Keep all chains


private:
  //These line is used to indicate how to search chains
  //int    anchor_hit, seed_hit, next_hit, seed_index;

  //this is another buffer to store the chains, only keep HitIndex
  //It is not as convenience as fChainBuf because user have to put these id
  //back to fHitPool to extract xyz info
  int    fChainNum;
  int    fHitIDInAChain[MAX_CHAINS_PER_EVENT][MAX_HITS_PER_CHAIN];
  int    fHitNumInAChain[MAX_CHAINS_PER_EVENT];  //keep number of hits on each chain
  
  double Max_Link_Sep;
  double Max_Ang;
  double Min_Ang;
  double Ang_Sep;

};

#endif 
