KalmanFilter application for RTPC12, By Jixie Zhang
TODO:
1) Change Bz field of each measure layer according to field map
2) Add Bx By into the framework
3) Try to apply Kalman Filter twice, the first iteration is fitting from
inside to outside, to achieve the state vector for the site at the end of the track.
Then use this state vector as initial value for the 2nd iteration fit, which is fitting
from outside to inside. 
4) Optimze global helix fitter. Find out in which situation it can be not used, or has
bad performance.



2016/03/18
1. Optimized the nitialize helix for Kanman Filter. I found that if a track curve
   back too much, global hilix fitter will return a wrong sign of curvature and the phi 
   angle. I could not solve the bug of helix fitter right now. However, I determine the
   sign of a track using the phi-deflection between the vertex point and the first hit 
   near the cathode. Then I compare it to the output of the helix fitter. If there signs
   are different, I will change the sign for Rho and change Phi angle by Pi.

2. Fix a bug for the initial helix state vector.  I passed the state vector at the 
   vertex point to it in the past. Now  I shift it to the last site.  With this bug fixed,  
   The Kalman Filter is as good as global helix fitter, sometimes a litter better.
   I scan the initial errer matrix element value again and found that it is not as sensitive
   as before.

3. I also test the global helix fitter without force it fit to the beam line. The result
   is much worse.

4. Updated circle event generator. In the past it only generate hits from inside to outside,
   then stop. It does not create large curve back tracks. Now I allow it to swim back from
   outside to inside. 

5. Fixed a bug that if the user provide too small pt, there is no hit generated, in this case
   it will either crash or go into a dead loop. Now I force it to stop after 100 trials.  


2016/03/16
1. Fixed bug of x0_hel,y0_hel reconstruction
2. Fixed bug od step_#_fil do not match step_#, where # stands for x,y,x. The bug is 
   that the first site of "kaltrack" is a dummy site, I should ignore the first site
   when filling root leaves.
3. Added some macros.


2016/03/11
1. Optimized initial values for the covariant error matrix. Wrote scripts
   to scan these initial values.  I found that 0.02 or 0.05 is the best value.
   put 0.05 as a default.  Modified the main() to allow to give the value 
   through command line argument. The usage now looks like this:
   
  Usage: ./EXKalRTPC <job=0|1|2> <nevent> [pt_min_gev=0.1] [pt_max_gev=0.1] \
         [costh_min=-0.00001] [costh_max=0.00001] [error=0.05]
          job: 0 generate helix, 1 loadtrack from geant4 root file, 2 generate circle
          nevents: number of events to generate
          pt_min_gev and pt_max_gev: specifiy the range of pt in Gev
          Note that if pt is negative then anti-clockwise track will be generated
          costh_min and costh_max: specifiy the range of costh, only for job==0
          error is used to initialize the co-variant matrix before fitting.

2. Fixed bug in EXGenEVent::LoadATrack().  The bug is that it does not check the 
   hit ID from g4 root tree. Sometimes those hit IDs are negative numbers, which means
   they are not recontructable hits.

3. Added History.txt and macros dir. 

2016/03/10
1. Separated FitAndFilter from filling root tree. when this code is used
   by CLAS12 software, filling root tree is not necessary.   

2016/03/09  
1.  Rewrote KalRTPC into a class 
2.  Added debug tools


2016/03/08  First commit into git hub. Modified from KEK KalmanFilter packages.


 
