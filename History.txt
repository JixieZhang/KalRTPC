KalmanFilter application for RTPC12, By Jixie Zhang
TODO:
1) Change Bz field of each measurement layer according to field map
2) Add Bx By into the framework
3) Try to apply Kalman Filter twice, the first iteration is fitting from
outside to inside then smooth out, to achieve the state vector for the site at the 
end of the track. Then use this state vector as the initial value for the 2nd 
iteration, which is fitting from outside to inside. ----done by jixie, March 26 2016
4) Optimze global helix fitter. Find out in which situation it can be not used, or has
bad performance.  ---------------------------done by jixie, March 26 2016 

2017/06/14
1. Added visulization feature. 
   A) Added 3 base class EXVKalDetector,EXVMeasLayer and EXHYBTrack. The purpose
      is to add Draw(Int_t color, const Char_t *opt) method into Detectors and tracks.   
   B) Modified class EXKalDetector, EXMeasLayer, EXKalRTPC and EXKalManager to adapt 
      the above changes.
      
2. Modified EXKalManager to read GEMC root file as input.

3. Modified Main.cxx, use -g option to tell what type of input file. The new usage is:        
/------------------------------usage start----------------------------------------\ 
exe [-h] [-i] [-j <jobtype=0>] [-n <nevents=10000>]  [-e <error=0.05> ] \           
    [-c <ntracks=1> [space_cm=1.9] [min_ang_deg=30] [max_ang_deg=40.0] [ang_sep_cm=0.4>]] \
    [-p <pt_min_gev=0.1> <pt_max_gev=0.1>]  \                                              
    [-t <costh_min=-0.00001> <costh_max=0.00001>] \                                        
    [-z <z_min_cm=0.0> <z_max_cm=0.0>] \                                                   
    [-f <infile="infile.root">] \                                                          
    [-g <g4type=0>                                                                         

-------------------The following old usage is also supported----------------------
exe <job=0|1|2|3|4|5|6> <nevent> [pt_min_gev=0.1] [pt_max_gev=0.1] \
   [costh_min=-0.00001] [costh_max=0.00001] [error=0.05] [z_min=0.0] [z_max=0.0] \
   [infile=infile.root] [g4type=0]

          -h show this help menu;
          -i interactive mode;
          job: 0: run KalmanFilter with generated helix;
               1: run KalmanFilter with geant4 track;
               2: run KalmanFilter with generated circle;
               3: run ChainFinder but no fitting with geant4 tracks, need to couple with -c option;
               4: run ChainFinder + Global Helix Fitter with geant4 tracks
               5: run ChainFinder + KalmanFilter with geant4 tracks
          nevents: number of events to generate
          pt_min_gev and pt_max_gev: specifiy the range of pt in Gev
          Note that if pt is negative then anti-clockwise track will be generated
          costh_min and costh_max: specifiy the range of costh, only for job==0
          error is used to initialize the comvariant matrix before fitting.
          z_min and z_max are used to tell the range of thrown z.
          infile is used to specifiy the input root file.
          g4type tells the type of the input file: 0, Jixie's Geant4 RTPC12 tree, 1 GEMC tree

example1: exe 0 1000 ' -0.05' ' -0.07' ' -0.8' 0.8 0.05
example2: exe 0 1000 ' -0.05' ' -0.07' ' -0.8' 0.8 0.05 ' -20.0' 20.0 infile.root 1
example3: exe -j 0 -n 1000 -p -0.05 -0.07 -c 25 1.9 30.0 40.0 0.4 -z -20 20 -i
\------------------------------usage  end------------------------------------------/

4. Re-formated some source code.
  
   
2017/04/06
1. Added subroutine PrepareHitPool() which is passing vector as arguments.
  //Added By Carlos, using vector instead of array, provide x,x,z in cm
  void PrepareHitPool(vector<int> *id, vector<int> *tdc, vector<int> *adc, 
		      vector<double> *x, vector<double> *y,  vector<double> *z, 
		      int n, vector<int> *throwntid=0,  int append=0);
          
2017/03/15

1) Fixed one bug in EXKalRTPC::DoGlobalHelixFit(). It never do the fit before.
   Now it works.
2) Solved chi2=nan from BonusHelixFit.cc. The bug is due to the fact that include the 
   beam line point whose r=0 will cause "devide by zero".  I simple set the beam line
   point with r=0.00001 to avoid this.

3) Updated EXKalManger. Added chain-finder tree leaves for "ID, TDC, ADC, S, Phi". 
   Added subroutine  IdentifyThrownTID() to identify which thrown track a given chain 
   is corresponding to.

4) Updated Makefile to check for CLHEP and KalmanFilter installation. Renamed the version
   to v0.97 to match the tag version.

--------------------------tag v0.97---------------------------------------- 
2017/03/14
This is release 0.97. ChainFinder is ready!!!

1) Updated ChainFinder with sorting subroutine. Remove shell_3 because it has bugs.
   Added SortHitPoolByIDTDC() to sort the hit pool to match the order of BONUS6 data.
   After that I ran benchmark test again to chieve the following conclusion.
  //Conclusion of sorting:
  //1) Bubble and selection sort are most slow in any case
  //2) Bubble, selection and incertion sort are stable (stable means will not change 
  //order if two values are equal to each other).  Quick and shell sort are not stable.
  //3) Incertion sort is the fastest only if the array already sorted. It will be as 
  //slow as bubble if the array is sorted in opposite way. For random array it is still 
  //faster than bubble and selection sort. 
  //4) Shell_2 and Shell_seq are about the same speed. 
  //5) For random array, if array size>=30, quick sort is the fastest one. 
  //6) For the chain from this chainfinder, (they are almost sorted only a few location 
  //need to adjust), if array size>50, quick sort is the fastest, otherwise incertion sort 
  //is the best. 
2) Rewrote SortAChain(), 
  //For froward tracks, sorting by either S then Phi will work.
  //For curve back tracks, sorting by S then phi will not work.
  //Here is my solution:  
  //1) spilt the whole chain into two parts: forward part + backward part
  //2) sort both part by S then phi. 
  //   Forward part: S increasing, if S equal phi increasing;
  //   Backward part: S decreasing, if S equal phi increasing;
  //3) Finally merge these 2 parts together
 
  To identify backward or forward chain:
  //In theory, Phispan = Phi_at_cathode - Phi_at_GEM1 
  //Phi_at_D = kPi/2-atan(D/2./R), where R = P_GeV/(0.3B) 
  //For Pt=0.30 GeV, Phispan = 5.7 deg
  //For Pt=0.20 GeV, Phispan = 8.3 deg
  //For Pt=0.15 GeV, Phispan = 10.8 deg
  //For Pt=0.053 GeV, Phispan = 66.8 deg
  //If Phispan small, it is a high Pt chain, which never curve back
  //If Phispan very large, it is a small Pt chain, which is very likely to curve back
  //Note that the phi uncertainty is about 2 deg
  
  if(Phispan < 12.0/rad2deg ) bIsBackwardTrack=false;
  //Smax and phimax stay together, it is a positive and forward track 
  else if (Smax-fHitPool[buf[idxPhimax]].S < 0.5) bIsBackwardTrack=false;
  //Smax and phimin stay together, it is a negative and forward track 
  else if ( Smax-fHitPool[buf[idxPhimin]].S < 0.5) bIsBackwardTrack=false; 
  //take the differece os S between two ends of phi, is it is 0.5 cm less than Sspan, 
  //it must be curve-back track. For curve-back track, it is hard to determine which
  //end is head or tail
  else if (Sspan - fabs(fHitPool[buf[idxPhimin]].S-fHitPool[buf[idxPhimax]].S) > 0.5 ) {
    bIsBackwardTrack=true;
  }
  else if (Phispan > 80/rad2deg) bIsBackwardTrack=true;


2017/03/09
1. Added binary search to EXEventGen. Do benchmark test on binary-search, loop-search
   and optimized-loop-search to find out which can fastly determine which detector 
   layer for a given hit. The conclusion is: 
   //If kNDetLayer==21,  binary-search runs at the same speed as loop-search.
   //optimized-loop-search takes only 30-40% of the time that binary-search does.
2. Added sort angrithm into ChainFinder to sort chain by S increasing order. Do benchmark 
   test on them.
  //conclusion of sorting:
  //1) bubble and selection sort are most slow
  //2) incertion sort is faster than any if the array already sorted or near sorted
  //   it will be as slow as bubble if the array is sorted in opposite way
  //3) for random array, quick sort is the fastest one.
  //4) shell_3 is faster than shell_2 and shell_seq
  //5) For random array, if size<30, shell_3 is faster than quicksort.
  //6) For the chain from this chainfinder, (they are almost sorted), if size<80
  //   shell_3 is faster than quicksort. Sometimes incertion sort is the best. 
3. TODO: group hits in a chain by channel then sort by phi. Note that phi should be
  in either increasing or decreasing order. Think about that before writing the code.
4. TODO: find out how to link hits. Develop a good space-angle relationship.   
  
    

2017/03/07 
1. Change Main.cxx, use GNC getopt to take care of input arguments, still 
support old useage. Here is the new help menu.

/------------------------------usage start----------------------------------------\
exe [-h] [-j <jobtype=0>] [-n <nevents=10000>]  [-e <error=0.05> ] \
    [-c <ntracks=1> [space_cm=1.1] [min_ang_deg=23.3] [max_ang_deg=30.0] [ang_sep_cm=0.4>]] \
    [-p <pt_min_gev=0.1> <pt_max_gev=0.1>]  \
    [-t <costh_min=-0.00001> <costh_max=0.00001>] \
    [-z <z_min_cm=0.0> <z_max_cm=0.0>] \
    [-i <infile="infile.root">]

-------------------The following old usage is also supported----------------------
exe <job=0|1|2|3|4|5> <nevent> [pt_min_gev=0.1] [pt_max_gev=0.1] \
   [costh_min=-0.00001] [costh_max=0.00001] [error=0.05] [z_min=0.0] [z_max=0.0] \
   [infile=infile.root]

          job: 0: run KalmanFilter with generated helix;
               1: run KalmanFilter with geant4 track;
               2: run KalmanFilter with generated circle;
               3: run ChainFinder only geant4 tracks, need to couple with -c option;
               4: run ChainFinder + Global Helix Fitter with geant4 tracks
               5: run ChainFinder + KalmanFilter with geant4 tracks
          nevents: number of events to generate
          pt_min_gev and pt_max_gev: specifiy the range of pt in Gev
          Note that if pt is negative then anti-clockwise track will be generated
          costh_min and costh_max: specifiy the range of costh, only for job==0
          error is used to initialize the comvariant matrix before fitting.

example1: exe 0 1000 -0.05 -0.07 -0.8 0.8 0.05
example1: exe -j 0 -n 1000 -p -0.05 -0.07 -c 25 1.1 23.3 30.0 0.4 -z -15 15
\------------------------------usage  end------------------------------------------/

2. In order to be ccompiled by windows, I add getopt.h into "vc10_proj/." 
   Note that this file can not be compiled by linux, therefore I do not put it 
   into "include/." .  

3. Solved several bugs in ChainFinder. Added a few more member subroutines.
   Also added debug information.
   
4. ChainFinder, add "fChainNum_Stored" to indicate how many good tracks (>=5 hits) has 
   been found. "fChainNum" will also include bad tracks.

5. Indented several files using emacs. 
    
--------------------------tag v0.96---------------------------------------- 
2017/03/03
Added Chain-Finder. Do not debug yet. Push to github so Carlos can debug it. 

--------------------------tag v0.95---------------------------------------- 
2017/02/28
This is the 2nd released version which KalRTPC works as a library.      

2017/02/22
1. Reorganized the whole project by the following: 
A) added EXKalManager class to handle input output framework;
B) removed root tree I/O from EXKalRTPC. 
C) removed readding G4 root tree from EXEevntGen, put it into EXKalManager
D) made EXKalRTPC to be a clean module to do the Kalman Filter fit. EXKalRTPC contians
   2 hits buffers: fKalHits and fKalHits_Forward.  
   To use this code, user need to do the following:
   1) Reset the buff using Reset(); 
   2) Prepare a chain in time increasing order using PrepareATrack(xxx);
   3) Determine if it needs 2 iteration KF fitting and copy fKalHits to fKalHits_Forward
     using JudgeFor2ndIteration(bool bIncludeCurveBackHits);
  4) Do the fit using DoFitAndFilter(), which will fit fKalHits_Forward;
  see EXKalRTPC::Example() for details. 
E) made EXEventGen to be a clean module to generate track and fill original hit buffer
2. Added Chain-Finder module into this program. I do not want to change the 
   tree structure for this. Therefore the output root tree is organized in this way:
   1) one entry contains only one chain, which include all hits and fitted result
   2) one event contains multiple entries.  User need to use 'eventid, trackid' to tell   
      when an event ends.
   To use the chain-finder, user can read multiple entries from the input root file then
   fill all hits into the hit pool. chain-finder will use this pool to do its job. 
   
--------------------------tag v0.9---------------------------------------- 
This is the first released version.  This version is good to test Kalman Filter.
     
2016/10/11
1. After a lot of careful comparison I found that: 
	A) for non-curve-back tracks: global helix fitter is good enough,
		both 1-iter-KF and 2-iter-KF improve it very little. 
		1-iter-KF is better than 2-iter-KF in pt, but worse in phi. 
	B) for curve-back tracks:  global helix fitter need afterwards correction.
		only 2-iter-KF be able to reconstruct phi, but ruin pt reconstruction.
2. Update this code to this config: 2-iter-KF-Backward-wholeMatrix-with-phicorr		
   This update just to release the current code. Later on I will extract the kernl 
   of it to a library. 

2016/09/15
1. Added  Levenberg-Marquardt circle fitter
2. Updated global helix fitter. After careful comparison I found that if a track
   curves back, we only fit the first part of the track bebfore it curves for R and Phi.
   But we will fit theta and z using whe whole tracks.
 
2016/08/22
1. modify to apply 2nd iteration fitting

2016/03/24
1. Improved global helix fitter.  When the track curve too much, the global helix fitter 
   might not fit the helix correctly. It will give wrong sign of curvature, Phi0 different 
   by Pi and totaly wrong theta and z. When the sign is wrong, I correct the sign and phi.
   I then did linear regreesion to "rho*dfi vs dz" to get new_theta and new_z. I judge  
   if old_theta-PI/2 has different sign as new_theta-PI/2. If they do, I will use new_theta
   and new_z to replace old_theta and old_z.  I do not correct theta for each event, because
   the linear regression does not work well if theta is close to 90 deg, in which dz is
   within its uncertainty. 

2. Added 3-points helix parameter "P_3pt,Pt_3pt,Theta_3pt,R_3pt,A_3pt,B_3pt" into root tree.
   I want to compare them with global helix to find out if I could base on Theta_3pt to 
   correct old_theta. It turns out that  Theta_3pt is not as good as the new_theta mentioned
   above.

3. I might need to move the above improvement of global helix fit into the helix fitter 
   subroutine.

 
2016/03/18
1. Optimized the nitialize helix for Kanman Filter. I found that if a track curve
   back too much, global hilix fitter will return a wrong sign of curvature and the phi 
   angle. I could not solve the bug of helix fitter right now. However, I determine the
   sign of a track using the phi-deflection between the vertex point and the first hit 
   near the cathode. Then I compare it to the output of the helix fitter. If there signs
   are different, I will change the sign for Rho and change Phi angle by Pi.

2. Fix a bug for the initial helix state vector.  I passed the state vector at the 
   vertex point to it in the past. Now  I shift it to the last site.  With this bug fixed,  
   The Kalman Filter is as good as global helix fitter, sometimes a litter better.
   I scan the initial errer matrix element value again and found that it is not as sensitive
   as before.

3. I also test the global helix fitter without force it fit to the beam line. The result
   is much worse.

4. Updated circle event generator. In the past it only generate hits from inside to outside,
   then stop. It does not create large curve back tracks. Now I allow it to swim back from
   outside to inside. 

5. Fixed a bug that if the user provide too small pt, there is no hit generated, in this case
   it will either crash or go into a dead loop. Now I force it to stop after 100 trials.  


2016/03/16
1. Fixed bug of x0_hel,y0_hel reconstruction
2. Fixed bug od step_#_fil do not match step_#, where # stands for x,y,x. The bug is 
   that the first site of "kaltrack" is a dummy site, I should ignore the first site
   when filling root leaves.
3. Added some macros.


2016/03/11
1. Optimized initial values for the covariant error matrix. Wrote scripts
   to scan these initial values.  I found that 0.02 or 0.05 is the best value.
   put 0.05 as a default.  Modified the main() to allow to give the value 
   through command line argument. The usage now looks like this:
   
  Usage: ./EXKalRTPC <job=0|1|2> <nevent> [pt_min_gev=0.1] [pt_max_gev=0.1] \
         [costh_min=-0.00001] [costh_max=0.00001] [error=0.05]
          job: 0 generate helix, 1 loadtrack from geant4 root file, 2 generate circle
          nevents: number of events to generate
          pt_min_gev and pt_max_gev: specifiy the range of pt in Gev
          Note that if pt is negative then anti-clockwise track will be generated
          costh_min and costh_max: specifiy the range of costh, only for job==0
          error is used to initialize the co-variant matrix before fitting.

2. Fixed bug in EXGenEVent::LoadATrack().  The bug is that it does not check the 
   hit ID from g4 root tree. Sometimes those hit IDs are negative numbers, which means
   they are not recontructable hits.

3. Added History.txt and macros dir. 

2016/03/10
1. Separated FitAndFilter from filling root tree. when this code is used
   by CLAS12 software, filling root tree is not necessary.   

2016/03/09  
1.  Rewrote KalRTPC into a class 
2.  Added debug tools


2016/03/08  First commit into git hub. Modified from KEK KalmanFilter packages.


 
